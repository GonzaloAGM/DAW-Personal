<%- include('includes/header.ejs') %>
<%- include('includes/navTab.ejs') %>

<section class="tabcontent" id="DescripInstr">
    <h3 class="titulo_sec"> Descripción </h2>
    <p class="flow-text">
        En esta actividad exploraremos el estilo arquitectónico Modelo-Vista-Controlador y lo implementaremos con node+express.
    </p>
    <p>
        <h3>Objetivos:</h3>
        <ul>
            <li class="flow-text">Entender el estilo arquitectónico Modelo-Vista-Controlador.</li>
            <li class="flow-text">Diseñar aplicaciones con un estilo arquitectónico Modelo-Vista-Controlador.</li>
            <li class="flow-text">Implementar aplicaciones con un estilo arquitectónico Modelo-Vista-Controlador.</li>
        </ul>
    </p>

    <h3 class="titulo_sec">Instrucciones</h2>
    <p>
        <ol>
            <li class="flow-text">
                Atiende a la explicación del profesor del 
                <a href="https://docs.google.com/presentation/d/13_mWmuGt7FA8GZy3P6fyT98zJAmg2aW8frDKuoO8ag8/edit?usp=sharing">tema MVC</a>
                y pregunta tus dudas.
            </li></br>

            <li class="flow-text">
                Recuerda que para generar una aplicación es necesario inicializar el proyecto con npm init, e instalar express y 
                body-parser y un template engine como EJS con <code>npm install --save [nombre_paquete]</code>. Si es necesario, 
                recuerda configurar el archivo package.json para incluir el script que quieres que se ejecute con <code>npm start</code>.
            </li></br>

            <li class="flow-text">
                Por convención, nuestros controladores los pondremos en una carpeta controllers. Comenzaremos a mover la lógica 
                que antes habíamos puesto en las vistas, hacia una variable que exportaremos del controlador. Utilizaremos de 
                ejemplo el controlador <code>a_controller.js</code>:
                <pre>
exports.action = (request, response, next) => {
    response.render('view_file', { 
        atribute_1: 'Data 1', 
        atribute_2: 'Data 2'
    });
};</pre>
            </li></br>

            <li class="flow-text">
                El archivo con la ruta quedará más ligero, ya que únicamente tendrán nuestra ruta y la referencia hacia el controlador 
                que utilizarán, quedando de la siguiente forma:
                <pre>const aController = require('../controllers/a_controller');

router.get('/add-mascota', aController.action);</pre>
            </li><br>

            <li class="flow-text">
                Para implementar la capa del modelo, por convención, utilizaremos una carpeta models. Ahí pondremos cada uno de los archivos 
                de nuestro modelo. Es común tener un archivo de modelo por tabla de la base de datos. Un archivo de modelo, típicamente tiene 
                la siguiente estructura:
                <pre>
module.exports = class Mascota {

    //Constructor de la clase. Sirve para crear un nuevo objeto, y en él se definen las propiedades del modelo
    constructor(my_value) {
        this.attribute_1 = my_value;
    }

    //Este método servirá para guardar de manera persistente el nuevo objeto. 
    save() {
        
    }

    //Este método servirá para devolver los objetos del almacenamiento persistente.
    static fetchAll() {
        
    }

}</pre>
            Para usar el modelo en el controlador:
            <pre>
const Mascota = require('../models/mascota');

//Para crear un objeto de nuestro modelo
const mascota = new Mascota('Punky');
mascota.save();

//Para recuperar la lista de objetos del modelo
const mascotas = Mascota.fetchAll();</pre>
            
            Por el momento, podemos utilizar un arreglo para almacenar la información, entonces en al archivo del modelo podemos crear un 
            arreglo <code>const mascotas = []</code> , llenar en método <code>save()</code> con <code>mascotas.push(this);</code> y 
            <code>fetchAll()</code> con <code>return mascotas;</code>
            </li></br>

            <li class="flow-text">
            Refactoriza alguno de tus laboratorios anteriores o el avance de tu proyecto utilizando un estilo arquitectónico MVC. Otra 
            opción es que crees una nueva aplicación utilizando este patrón.
            </li></br>
            <li class="flow-text">
            Agrega una nueva funcionalidad que toque todos los puntos clave de la arquitectura.
            </li></br>
        </ol>
    </p>
</section>
<%- include('includes/footer.ejs') %>