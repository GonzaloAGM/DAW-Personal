<%- include('includes/header.ejs') %>
<%- include('includes/navTab.ejs') %>

<section class="tabcontent" id="DescripInstr">
    <h3 class="titulo_sec"> Descripción </h2>
    <p class="flow-text">
        En esta actividad comenzaremos con la interacción con una base de datos desde node.
    </p>
    <p>
        <h3>Objetivos:</h3>
        <ul>
            <li class="flow-text">Entender cómo interactúa una aplicación web con una base de datos.</li>
            <li class="flow-text">Desarrollar aplicaciones web que interactúen con bases de datos.</li>
        </ul>
    </p>

    <h3 class="titulo_sec">Instrucciones</h2>
    <p>
        <ol>
            <li class="flow-text">
                Para interactuar con una base de datos, debemos crear la base de datos. Para este laboratorio usaremos MySQL, 
                sin embargo, la lógica es muy similar si decides trabajar con cualquier otro motor de bases de datos. Crea tu 
                base de datos y crea algunas tablas y ponles algunos datos, de manera similar a la demostración del profesor.
            </li></br>

            <li class="flow-text">
                Para poder interactuar con el manejador de base de datos MySQL, ocuparemos el paquete <code>mysql2</code>.
            </li></br>

            <li class="flow-text">
                Para poder conectarnos con la base de datos, utilizaremos el archivo <code>database.js</code>, el cual 
                crearemos dentro de un folder con nuestras librerías de apoyo, típicamente nombrado <strong>util</strong>. El 
                archivo se encargará de manejar las conexiones con nuestra base de datos:
                <pre>
const mysql = require('mysql2');

const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    database: 'database_name',
    password: 'el_password_de_tu_usuario_de_la_bd'
});

module.exports = pool.promise();</pre>

                Asegúrate de cambiar los valores de los atributos del objeto de js para que coincidan con los de tu base de 
                datos. Como podrás observar, se exporta una promesa. Las promesas permiten manejar fácilmente código que se 
                ejecuta de manera asíncrona.
            </li></br>

            <li class="flow-text">
                Para conectarnos con la base de datos y ejecutar consultas desde nuestra aplicación:
                <pre>
const db = require('./util/database');

db.execute('Consulta SQL por ejemplo: SELECT * FROM mi_tabla');</pre>

                Ahora, debido a que en database.js devolvimos una promesa, esto nos permite hacer algo después de que ejecutamos 
                la consulta con el método <code>.then()</code>, e incluso manejar los errores con el método <code>.catch()</code>. 
                Por ejemplo, si queremos recuperar los registros de la tabla mascotas:
                <pre>
db.execute('SELECT * FROM mascotas')
.then(([rows, fieldData]) => {
    console.log(rows);
})
.catch(err => {
    console.log(err);
});</pre>
                En la varibale <code>rows</code> tendremos cada uno de de los registros de nuestra consulta. 
            </li><br>

            <li class="flow-text">
                El código de interacción con la base de datos, si seguimos buenas prácticas, lo escribiremos siempre en nuestros 
                modelos. Por lo que normalmente, el método <code>fetchAll()</code> de nuestros modelos quedaría con el siguiente 
                formato:
                <pre>
static fetchAll() {
    return db.execute('SELECT * FROM mascotas');
}</pre>

                Y el código del controlador (asumiendo que tenemos un template de la vista llamado 'vista.html' que despliega el 
                contenido de un arreglo de js llamado mascotas):
                <pre>
exports.getMascotas = (request, response, next) => {
    Mascota.fetchAll()
        .then(([rows, fieldData]) => {
            response.render('vista', {
                mascotas: rows
            })
        })
        .catch(err => console.log(err));
}</pre> 
            </li><br>

            <li class="flow-text">
                Ahora, para insertar un registro en la base de datos, nuestro código del método save() en los modelos, tendría el siguiente formato:
                <pre>
save() {
    return db.execute('INSERT INTO mascotas (nombre_columna_1, nombre_columna_2) VALUES (?, ?)',
        [this.variable_valor_1, this.variable_valor_2]
    );

}</pre>
            Como podrás ver, no se insertan los valores directamente en el string, sino se pone un signo de interrogación, esto es para evitar ataques 
            de inyección de SQL, ya que el método execute, al pasar estos datos en un arreglo como segundo argumento, evita que si se inserta código 
            SQL, éste no se ejecute y simplemente sea interpretado como un string. <br> El código del controlador quedaría con el siguiente formato:
            <pre>
exports.insertarMascota = (request, response, next) => {
    const mascota = new Mascota(request.body.nombre, request.body.descripcion);
    mascota.save().then(() => {
        response.redirect('/');
    }).catch(err => console.log(err));
};</pre>
            </li></br>

            <li class="flow-text">
                En ocasiones es necesario recuperar un registro en particular de la base de datos, y muchas veces queremos que esto pueda realizarse 
                desde las rutas. Para indicarle al ruteador de express que un valor en una ruta es una varibale, podemos hacerlo agregando como 
                prefijo el símbolo  <code> : </code> seguido del nombre que le queremos dar a la variable:
                <pre>
router.get('/mascotas/:mascota_id', controllerMascotas.getMascota);
                    
Y en el controlador para hacer uso de la variable:
export.getMascota = (request, response, next) => {
    const id = request.params.mascota_id;
    //Resto del código del controlador...
}</pre>
            </li></br>
            
            <li class="flow-text">
                Continúa mejorando tus laboratorios anteriores o tu proyecto agregándoles interacción 
                con la base de datos. Asegúrate de al menos realizar una consulta que devuelva varios 
                registros, una consulta que devuelva 1 sólo registro, una inserción, y una edición de 
                un registro de la base de datos. Recuerda que siempre tienes también la opción de crear 
                una nueva aplicación.
            </li></br>
        </ol>
    </p>
</section>
<%- include('includes/footer.ejs') %>